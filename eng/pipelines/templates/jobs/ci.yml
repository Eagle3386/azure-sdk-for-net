parameters:
  - name: Artifacts
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
  - name: ArtifactName
    type: string
    default: packages
  - name: SDKType
    type: string
    default: all
  - name: ServiceDirectory
    type: string
    default: not-specified
  - name: BuildSnippets
    type: boolean
    default: true
  - name: CheckAOTCompat
    type: boolean
    default: false
  - name: AOTTestInputs
    type: object
    default: []
  - name: TestSetupSteps
    type: stepList
    default: []
  - name: TestTimeoutInMinutes
    type: number
  - name: MatrixConfigs
    type: object
  - name: AdditionalMatrixConfigs
    type: object
    default: []
  - name: MatrixFilters
    type: object
    default: []
  - name: MatrixReplace
    type: object
    default: []
  - name: TestDependsOnDependency
    type: string
    default: not-specified
  - name: LimitForPullRequest
    type: boolean
    default: false

jobs:
  - job: Build
    pool:
      name: $(WINDOWSPOOL)
      image: $(WINDOWSVMIMAGE)
      os: windows

    variables:
      Codeql.Enabled: true
      Codeql.BuildIdentifier: ${{ parameters.ServiceDirectory }}
      Codeql.SkipTaskAutoInjection: false
      SDKType: ${{ parameters.SDKType }}

    steps:
      - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
        parameters:
          Paths:
            - "/*"
            - "!SessionRecords"
      - template: /eng/pipelines/templates/steps/install-dotnet.yml
      - template: /eng/common/pipelines/templates/steps/set-default-branch.yml
      - pwsh: |
          echo "##vso[build.addbuildtag]Scheduled"
        displayName: "Tag scheduled builds"
        condition: and(eq(variables['Build.SourceBranchName'],variables['DefaultBranch']),eq(variables['Build.Reason'],'Schedule'))
      # Set env variable SkipDevBuildNumber to generate package properties with non alpha version
      # Package version is used to create or update package work item from CI pipeline
      - pwsh: |
          echo "##vso[task.setvariable variable=SkipDevBuildNumber]true"
        displayName: "Set SkipDevBuildNumber env variable"
      - template: /eng/common/pipelines/templates/steps/daily-dev-build-variable.yml
        parameters:
          ServiceDirectory: ${{parameters.ServiceDirectory}}
      - pwsh: |
          # Reset SkipDevBuildNumber as empty
          $skipDevBuildNumber = ""
          echo "##vso[task.setvariable variable=SkipDevBuildNumber]$skipDevBuildNumber"
          Write-Host "SkipDevBuildNumber: [$(SkipDevBuildNumber)]"
          $skipDevBuildNumber = "false"
          # For .NET builds the only case we want to not have dev build numbers on our packages is when it is manually queued and
          # the SetDevVersion property isn't set to true. All other cases should contain dev version numbers.
          if ('$(Build.Reason)' -eq 'Manual' -and '$(SetDevVersion)' -ne 'true') {
            $skipDevBuildNumber = "true"
          }
          $versioningProperties = "/p:OfficialBuildId=$(OfficialBuildId) /p:SkipDevBuildNumber=$skipDevBuildNumber";
          echo "##vso[task.setvariable variable=VersioningProperties]$versioningProperties"
        displayName: "Setup .NET specific versioning properties"
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'
      - template: /eng/pipelines/templates/steps/dotnet-diagnostics.yml
        parameters:
          LogFilePath: $(Build.ArtifactStagingDirectory)/pack.binlog
      - script: >-
          dotnet pack eng/service.proj -warnaserror
          /p:ValidateRunApiCompat=true
          /p:SDKType=${{ parameters.SDKType }}
          /p:ServiceDirectory=${{ parameters.ServiceDirectory }}
          /p:IncludeTests=false
          /p:PublicSign=false $(VersioningProperties)
          /p:Configuration=$(BuildConfiguration)
          /p:CommitSHA=$(Build.SourceVersion)
          /p:ArtifactsPackagesDir=$(Build.ArtifactStagingDirectory)
          $(DiagnosticArguments)
        displayName: "Build and Package"

      - task: Powershell@2
        inputs:
          filePath: $(Build.SourcesDirectory)/eng/common/scripts/Save-Package-Properties.ps1
          arguments: >
            -ServiceDirectory ${{parameters.ServiceDirectory}}
            -OutDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
            -AddDevVersion:$$(SetDevVersion)
          pwsh: true
          workingDirectory: $(Pipeline.Workspace)
        displayName: Update package properties with dev version

      - task: Powershell@2
        inputs:
          filePath: $(Build.SourcesDirectory)/eng/scripts/Save-Package-Namespaces-Property.ps1
          arguments: >
            -RepoRoot $(Build.SourcesDirectory)
            -PackageInfoDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
            -BuildConfiguration $(BuildConfiguration)
          pwsh: true
          workingDirectory: $(Pipeline.Workspace)
        displayName: Update package properties with namespaces

      - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
        parameters:
          ArtifactPath: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'packages'
